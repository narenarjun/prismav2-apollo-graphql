type Query {
  greet(query: String): String!
  users(
    filter: String
    cursor: ID
    take: Int = 50
    limit: UserLimitByInput
    orderBy: UserOrderByInput
  ): [User!]!
  me: User!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  loginUser(data: LoginUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput): User!
}

type User {
  id: ID!
  name: String!
  email: String
  createdAt: String!
  updatedAt: String!
}

input UserLimitByInput {
  name: String
}

input UserOrderByInput {
  name: Sort
  email: String
  createdAt: Sort
  updatedAt: Sort
}

enum Sort {
  asc
  desc
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
